y = feature) +
theme_minimal()
}
# List of numerical features (excluding "id" and "diagnosis")
numerical_features <- names(breastCancer[, -c(1, 2)])
# Create individual boxplots for each numerical variable
for (feature in numerical_features) {
bp <- ggplot(breastCancer, aes(x = diagnosis, y = .data[[feature]], fill = diagnosis)) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(bp)
}
# List of numerical features (excluding "id" and "diagnosis")
numerical_features <- names(breastCancer[, -c(1, 2)])
plot_data <- gather(breastCancer, key = "variable", value = "value", -diagnosis, -id)
numerical_features <- names(breastCancer[, -c(1, 2)])
for (i in numerical_features) {
bp <- ggplot(breastCancer, aes(x = diagnosis, y = .data[[feature]], fill = diagnosis)) +
geom_boxplot() +
labs(title = paste("Boxplot for", i),
x = "Diagnosis",
y = i) +
theme_minimal()
print(bp)
}
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
# List of numerical features (excluding "id" and "diagnosis")
numerical_features <- names(breastCancer[, -c(1, 2)])
# Create individual boxplots for each numerical variable and print them
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
# List of numerical features (excluding "id" and "diagnosis")
numerical_features <- names(breastCancer[, -c(1, 2)])
# Create individual boxplots for each numerical variable and print them
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer_noid)[9] ="concave_points_mean"
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[9] ="concave_points_mean"
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numerical_features <- names(breastCancer[, -c(1, 2)])
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
breastCancer <- read_csv("BreastCancerWisconsin.csv")
View(breastCancer)
library(ggplot2)
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
ggplot(breastCancer, aes(x = diagnosis, fill = diagnosis)) +
geom_bar(color = "black", fill = c("darkgreen", "darkred")) +
labs(title = "Diagnosis Distribution", x = "Diagnosis", y = "Count") +
theme_minimal()
# Here we notice that the total Benign cases are almost double the cases of Malignant cases.
numericalData <-breastCancer[,c(-1,-2)]
numericalData
# Making sure there are no spaces for column header names so it works with R.
colnames(numericalData)[8] ="concave_points_mean"
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Making sure there are no spaces for column header names so it works with R.
colnames(numericalData)[8] ="concave_points_mean"
library(ggplot)
# Making sure there are no spaces for column header names so it works with R.
colnames(numericalData)[8] ="concave_points_mean"
library(ggplot2)
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[9] ="concave_points_mean"
library(ggplot2)
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[10] ="concave_points_mean"
library(ggplot2)
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
breastCancer <- read_csv("BreastCancerWisconsin.csv")
View(breastCancer)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
breastCancer <- read_csv("BreastCancerWisconsin.csv")
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[10] ="concave_points_mean"
View(breastCancer)
library(ggplot2)
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
ggplot(breastCancer, aes(x = diagnosis, fill = diagnosis)) +
geom_bar(color = "black", fill = c("darkgreen", "darkred")) +
labs(title = "Diagnosis Distribution", x = "Diagnosis", y = "Count") +
theme_minimal()
# Here we notice that the total Benign cases are almost double the cases of Malignant cases.
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numericalData <-breastCancer[,c(-1,-2)]
numericalData
library(ggplot2)
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numericalData <-breastCancer[,c(-1,-2)]
numericalData
library(ggplot2)
for (feature in numerical_features) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
library(ggplot2)
for (feature in numericalData) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numericalData <- names(breastCancer[, -c(1, 2)])
numericalData
library(ggplot2)
for (feature in numericalData) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
ibrary(ggplot2)
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = feature, fill = "diagnosis")) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.7) +
labs(title = paste("Histogram for", feature),
x = feature,
y = "Frequency") +
theme_minimal()
print(p)
}
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
breastCancer <- read_csv("BreastCancerWisconsin.csv")
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[10] ="concave_points_mean"
View(breastCancer)
library(ggplot2)
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
ggplot(breastCancer, aes(x = diagnosis, fill = diagnosis)) +
geom_bar(color = "black", fill = c("darkgreen", "darkred")) +
labs(title = "Diagnosis Distribution", x = "Diagnosis", y = "Count") +
theme_minimal()
# Here we notice that the total Benign cases are almost double the cases of Malignant cases.
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numericalFeatures <- names(breastCancer[, -c(1, 2)])
numericalFeatures
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = feature, fill = "diagnosis")) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.7) +
labs(title = paste("Histogram for", feature),
x = feature,
y = "Frequency") +
theme_minimal()
print(p)
}
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = feature)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.7) +
labs(title = paste("Histogram for", feature),
x = feature,
y = "Frequency") +
theme_minimal()
print(p)
}
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = feature)) +
geom_histogram(binwidth = 1, color = "black", fill = "white") +
geom_vline(xintercept = seq(min(breastCancer[[feature]]), max(breastCancer[[feature]]) + 1, by = 1),
color = "black", linetype = "dashed", size = 0.5) +
labs(title = paste("Histogram for", feature),
x = feature,
y = "Frequency") +
theme_minimal()
print(p)
}
library(ggplot2)
library(ggplot2)
# Create a histogram for "radius_mean"
ggplot(breastCancer, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, color = "black", fill = "white") +
geom_vline(xintercept = seq(min(breastCancer$radius_mean), max(breastCancer$radius_mean) + 1, by = 1),
color = "black", linetype = "dashed", size = 0.5) +
labs(title = "Histogram for Radius Mean",
x = "Radius Mean",
y = "Frequency") +
theme_minimal()
library(ggplot2)
# Create a histogram for "radius_mean"
ggplot(breastCancer, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, color = "black", fill = "white") +
geom_vline(xintercept = seq(min(breastCancer$radius_mean), max(breastCancer$radius_mean) + 1, by = 1),
color = "black", size = 0.5) +
labs(title = "Histogram for Radius Mean",
x = "Radius Mean",
y = "Frequency") +
theme_minimal()
library(ggplot2)
# Create a histogram for "radius_mean"
ggplot(breastCancer, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, color = "black", fill = "white") +
labs(title = "Histogram for Radius Mean",
x = "Radius Mean",
y = "Frequency") +
theme_minimal()
library(ggplot2)
# Create a histogram for "radius_mean"
ggplot(breastCancer, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, color = "black", fill = "darkblue") +
labs(title = "Histogram for Radius Mean",
x = "Radius Mean",
y = "Frequency") +
theme_minimal()
library(ggplot2)
# Create a histogram for "radius_mean"
ggplot(breastCancer, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, color = "black", fill = "lightblue") +
labs(title = "Histogram for Radius Mean",
x = "Radius Mean",
y = "Frequency") +
theme_minimal()
library(ggplot2)
numericalFeatures <- names(breastCancer[, -c(1, 2)])
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes(x = .data[[feature]])) +
geom_histogram(binwidth = 1, color = "black", fill = "lightblue") +
labs(title = paste("Histogram for", feature),
x = feature,
y = "Frequency") +
theme_minimal()
print(p)
}
library(ggplot2)
# Create a histogram for "radius_mean"
ggplot(breastCancer, aes(x = smoothness_mean)) +
geom_histogram(binwidth = 1, color = "black", fill = "lightblue") +
labs(title = "Histogram for Radius Mean",
x = "Radius Mean",
y = "Frequency") +
theme_minimal()
library(ggplot2)
hist(breastCancer$radius_mean, col = "lightblue", main = "Histogram of Variable")
hist(breastCancer$radius_mean, col = "lightblue", main = "Histogram of Variable")
hist(breastCancer$radius_mean, col = "lightblue", main = "Histogram of Variable")```
library(ggplot2)
for (i in numericalFeatures){
hist(breastCancer$i, col = "lightblue", main = "Histogram of")
}
library(ggplot2)
numericalFeatures <- names(breastCancer[, -c(1, 2)])
for (feature in numericalFeatures) {
hist_data <- breastCancer[[feature]]
hist_title <- paste("Histogram of", feature)
hist(hist_data, col = "lightblue", main = hist_title, xlab = feature)
}
# Converting M and B to numerical values for classification where benign=0 and malignant = 1
breastCancer$diagnosis<-factor(breastCancer$diagnosis,labels = c(0,1))
breastCancer_noid<-breastCancer[,c(-1)]
breastCancer_noid
attach(breastCancer_noid)
png('C:\\Users\\karee\\Downloads\\R_output\\my_plot.png',width = 2000,height=2000)
#applying PCA on our dataset
pca.BC <- princomp(breastCancer_cont,cor=T)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
breastCancer <- read_csv("BreastCancerWisconsin.csv")
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[10] ="concave_points_mean"
View(breastCancer)
library(ggplot2)
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
ggplot(breastCancer, aes(x = diagnosis, fill = diagnosis)) +
geom_bar(color = "black", fill = c("darkgreen", "darkred")) +
labs(title = "Diagnosis Distribution", x = "Diagnosis", y = "Count") +
theme_minimal()
# Here we notice that the total Benign cases are almost double the cases of Malignant cases.
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numericalFeatures <- names(breastCancer[, -c(1, 2)])
numericalFeatures
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
numericalFeatures <- names(breastCancer[, -c(1, 2)])
for (feature in numericalFeatures) {
hist_data <- breastCancer[[feature]]
hist_title <- paste("Histogram of", feature)
hist(hist_data, col = "lightblue", main = hist_title, xlab = feature)
}
# Converting M and B to numerical values for classification where benign=0 and malignant = 1
breastCancer$diagnosis<-factor(breastCancer$diagnosis,labels = c(0,1))
breastCancer_noid<-breastCancer[,c(-1)]
breastCancer_noid
attach(breastCancer_noid)
knitr::opts_chunk$set(echo = TRUE)
install.packages("scatterplot3d")
if (!requireNamespace("scatterplot3d", quietly = TRUE)) {
install.packages("scatterplot3d")
}
library(scatterplot3d)
# Create a sample dataset
set.seed(123)
data <- matrix(rnorm(300), ncol = 3)
# Compute principal components
pcs <- prcomp(data)
# Extract principal components
pc1 <- pcs$x[, 1]
pc2 <- pcs$x[, 2]
pc3 <- pcs$x[, 3]
# Plot 3D scatterplot with principal components
scatterplot3d(pc1, pc2, pc3, main = "3D Principal Components",
xlab = "PC1", ylab = "PC2", zlab = "PC3",
color = "blue", pch = 16)
# Install and load the scatterplot3d library
if (!requireNamespace("scatterplot3d", quietly = TRUE)) {
install.packages("scatterplot3d")
}
library(scatterplot3d)
# Create a sample dataset
set.seed(123)
data <- matrix(rnorm(300), ncol = 3)
# Compute principal components
pcs <- prcomp(data)
# Extract principal components
pc1 <- pcs$x[, 1]
pc2 <- pcs$x[, 2]
pc3 <- pcs$x[, 3]
# Extract variable loadings (vector loadings)
loadings <- pcs$rotation
# Plot 3D scatterplot with principal components and loadings
scatterplot3d(pc1, pc2, pc3, main = "3D Principal Components with Loadings",
xlab = "PC1", ylab = "PC2", zlab = "PC3",
color = "blue", pch = 16)
# Add arrows for variable loadings
arrows3D(0, 0, 0, loadings[1, ], loadings[2, ], loadings[3, :],
knitr::opts_chunk$set(echo = TRUE)
library(readr)
breastCancer <- read_csv("BreastCancerWisconsin.csv")
# Making sure there are no spaces for column header names so it works with R.
colnames(breastCancer)[10] ="concave_points_mean"
View(breastCancer)
#install.packages(ggplot2)
library(ggplot2)
breastCancer$diagnosis <- factor(breastCancer$diagnosis, levels = c("B", "M"))
ggplot(breastCancer, aes(x = diagnosis, fill = diagnosis)) +
geom_bar(color = "black", fill = c("darkgreen", "darkred")) +
labs(title = "Diagnosis Distribution", x = "Diagnosis", y = "Count") +
theme_minimal()
# Here we notice that the total Benign cases are almost double the cases of Malignant cases.
# Splitting the dataset so we only deal with numerical features when visualizing the boxplot.
numericalFeatures <- names(breastCancer[, -c(1, 2)])
numericalFeatures
library(ggplot2)
for (feature in numericalFeatures) {
p <- ggplot(breastCancer, aes_string(x = "diagnosis", y = feature, fill = "diagnosis")) +
geom_boxplot() +
labs(title = paste("Boxplot for", feature),
x = "Diagnosis",
y = feature) +
theme_minimal()
print(p)
}
# Converting M and B to numerical values for classification where benign=0 and malignant = 1
breastCancer$diagnosis<-factor(breastCancer$diagnosis,labels = c(0,1))
breastCancer_noid<-breastCancer[,c(-1)]
breastCancer_noid
attach(breastCancer_noid)
# png display the plot details
png('C:\\Users\\karee\\Downloads\\R_output\\my_plot.png',width = 2000,height=2000)
#applying PCA on our dataset
pca.BC <- princomp(breastCancer_noid[,-1],cor=T)
summary(pca.BC,loadings=T,cutoff=F)
plot(1:(length(pca.BC$sdev)),  (pca.BC$sdev)^2, type='b',
main="Scree Plot", xlab="Number of Components", ylab="Eigenvalue Size")
library(scatterplot3d)
# Assuming 'pca.BC' is your PCA object
# Extract principal components
pc1 <- pca.BC$scores[, 1]
pc2 <- pca.BC$scores[, 2]
pc3 <- pca.BC$scores[, 3]
# Extract variable loadings (vector loadings)
loadings <- pca.BC$rotation
# Create a vector of colors based on the 'diagnosis' variable
colors <- ifelse(diagnosis == 1, "red", "blue")
# Plot 3D scatterplot with principal components and loadings
scatterplot3d(pc1, pc2, pc3, main = "3D Principal Components with Loadings",
xlab = "PC1", ylab = "PC2", zlab = "PC3",
col = colors, pch = 16)
library(scatterplot3d)
# Assuming 'pca.BC' is your PCA object
# Extract principal components
pc1 <- pca.BC$scores[, 1]
pc2 <- pca.BC$scores[, 2]
pc3 <- pca.BC$scores[, 3]
# Extract variable loadings (vector loadings)
loadings <- pca.BC$rotation
# Create a vector of colors based on the 'diagnosis' variable
colors <- ifelse(diagnosis == 1, "red", "blue")
# Plot 3D scatterplot with principal components and loadings
scatterplot3d(x = pc1, y = pc2, z = pc3, main = "3D Principal Components with Loadings",
xlab = "PC1", ylab = "PC2", zlab = "PC3",
color = colors, pch = 16)
